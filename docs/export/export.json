{
    "rules": [
        {
            "name": "Ticket Price Constraint",
            "description": "Ensure ticket prices are above a reasonable threshold.",
            "use_case": "Ticket's price must be greater than a threshold to be valid.",
            "code": "Rule.constraint(validate=Ticket,\n                as_condition=lambda row: row.price > 0,\n                error_msg=\"Ticket price ({row.price}) must be greater than zero\")",
            "error": null,
            "status": "active",
            "entity": null,
            "id": "01JJ9C1Y7AT1YKK2R2P7WHBKBJ"
        },
        {
            "name": "Passenger Luggage Weight Sum",
            "description": "Sum total luggage weight for each passenger.",
            "use_case": "Keep a running total of luggage weight for each passenger.",
            "code": "Rule.sum(derive=Passenger.luggage_weight_total, as_sum_of=Luggage.weight)",
            "error": null,
            "status": "accepted",
            "entity": null,
            "id": "01JJ9C1YCMGESPW2WF2KWA0JHX"
        }
    ],
    "models": [
        {
            "classname": "Airplane",
            "code": "class Airplane(Base):  # type: ignore\n    \"\"\"\n    description: Represents an airplane entity.\n    \"\"\"\n    __tablename__ = 'airplane'\n    _s_collection_name = 'Airplane'  # type: ignore\n\n    id = Column(Integer, primary_key=True)\n    model = Column(String)\n    seating_capacity = Column(Integer)\n    passenger_count = Column(Integer)\n\n    # parent relationships (access parent)\n\n    # child relationships (access children)\n    PassengerList : Mapped[List[\"Passenger\"]] = relationship(back_populates=\"airplane\")"
        },
        {
            "classname": "Airport",
            "code": "class Airport(Base):  # type: ignore\n    \"\"\"\n    description: Represents an airport entity.\n    \"\"\"\n    __tablename__ = 'airport'\n    _s_collection_name = 'Airport'  # type: ignore\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    code = Column(String)\n    city = Column(String)\n    country = Column(String)\n    latitude : DECIMAL = Column(DECIMAL)\n    longitude : DECIMAL = Column(DECIMAL)"
        },
        {
            "classname": "Passenger",
            "code": "class Passenger(Base):  # type: ignore\n    \"\"\"\n    description: Represents a passenger entity with a link to airplane.\n    \"\"\"\n    __tablename__ = 'passenger'\n    _s_collection_name = 'Passenger'  # type: ignore\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    email = Column(String)\n    luggage_weight_total : DECIMAL = Column(DECIMAL)\n    airplane_id = Column(ForeignKey('airplane.id'))\n\n    # parent relationships (access parent)\n    airplane : Mapped[\"Airplane\"] = relationship(back_populates=(\"PassengerList\"))\n\n    # child relationships (access children)\n    LuggageList : Mapped[List[\"Luggage\"]] = relationship(back_populates=\"passenger\")"
        },
        {
            "classname": "Luggage",
            "code": "class Luggage(Base):  # type: ignore\n    \"\"\"\n    description: Represents luggage linked to a passenger.\n    \"\"\"\n    __tablename__ = 'luggage'\n    _s_collection_name = 'Luggage'  # type: ignore\n\n    id = Column(Integer, primary_key=True)\n    passenger_id = Column(ForeignKey('passenger.id'))\n    weight : DECIMAL = Column(DECIMAL)\n\n    # parent relationships (access parent)\n    passenger : Mapped[\"Passenger\"] = relationship(back_populates=(\"LuggageList\"))"
        }
    ]
}