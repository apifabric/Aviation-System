{
    "models": [
        {
            "classname": "Airport",
            "code": "class Airport(Base):\n    __tablename__ = 'airport'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String)\n    location = Column(String)\n    construction_year = Column(Integer)\n    capacity = Column(Integer)",
            "description": "This class represents an airport entity that includes basic attributes like name, location, construction year, and capacity.",
            "name": "airport"
        },
        {
            "classname": "Flight",
            "code": "class Flight(Base):\n    __tablename__ = 'flight'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    flight_number = Column(String)\n    departure_time = Column(DateTime)\n    arrival_time = Column(DateTime)\n    airport_id = Column(Integer, ForeignKey('airport.id'))",
            "description": "This class represents a flight entity, holding details about flight number, departure and arrival times, and the related airport.",
            "name": "flight"
        },
        {
            "classname": "Airplane",
            "code": "class Airplane(Base):\n    __tablename__ = 'airplane'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    airplane_model = Column(String)\n    airline = Column(String)\n    capacity = Column(Integer)\n    manufacturer_id = Column(Integer, ForeignKey('manufacturer.id'))",
            "description": "Represents the airplane details with attributes like model, airline, capacity, and manufacturer link.",
            "name": "airplane"
        },
        {
            "classname": "Manufacturer",
            "code": "class Manufacturer(Base):\n    __tablename__ = 'manufacturer'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String)\n    country = Column(String)",
            "description": "Manufacturer details, including the name and originating country.",
            "name": "manufacturer"
        },
        {
            "classname": "Pilot",
            "code": "class Pilot(Base):\n    __tablename__ = 'pilot'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    first_name = Column(String)\n    last_name = Column(String)\n    license_number = Column(String)",
            "description": "Represents a pilot entity with basic information such as first and last name, and license number.",
            "name": "pilot"
        },
        {
            "classname": "Assignment",
            "code": "class Assignment(Base):\n    __tablename__ = 'assignment'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    pilot_id = Column(Integer, ForeignKey('pilot.id'))\n    flight_id = Column(Integer, ForeignKey('flight.id'))",
            "description": "An assignment connecting pilots to their flights.",
            "name": "assignment"
        },
        {
            "classname": "Staff",
            "code": "class Staff(Base):\n    __tablename__ = 'staff'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    first_name = Column(String)\n    last_name = Column(String)\n    role = Column(String)\n    airport_id = Column(Integer, ForeignKey('airport.id'))",
            "description": "Represents various staff members, their roles, and assigned airports.",
            "name": "staff"
        },
        {
            "classname": "Passenger",
            "code": "class Passenger(Base):\n    __tablename__ = 'passenger'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    first_name = Column(String)\n    last_name = Column(String)\n    passport_number = Column(String)",
            "description": "Basic passenger data including name and passport number.",
            "name": "passenger"
        },
        {
            "classname": "Ticket",
            "code": "class Ticket(Base):\n    __tablename__ = 'ticket'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    ticket_number = Column(String)\n    price = Column(Integer)\n    passenger_id = Column(Integer, ForeignKey('passenger.id'))\n    flight_id = Column(Integer, ForeignKey('flight.id'))",
            "description": "Information pertaining to a ticket entity including price, and link to passengers and flights.",
            "name": "ticket"
        },
        {
            "classname": "Booking",
            "code": "class Booking(Base):\n    __tablename__ = 'booking'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    booking_number = Column(String)\n    booking_date = Column(Date)\n    ticket_id = Column(Integer, ForeignKey('ticket.id'))",
            "description": "Holds details about bookings connecting to tickets.",
            "name": "booking"
        },
        {
            "classname": "Luggage",
            "code": "class Luggage(Base):\n    __tablename__ = 'luggage'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    weight = Column(Integer)\n    passenger_id = Column(Integer, ForeignKey('passenger.id'))",
            "description": "Represents luggage details associated with passengers.",
            "name": "luggage"
        },
        {
            "classname": "Gate",
            "code": "class Gate(Base):\n    __tablename__ = 'gate'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    gate_number = Column(String)\n    airport_id = Column(Integer, ForeignKey('airport.id'))",
            "description": "Details for gates at the airport and their location.",
            "name": "gate"
        }
    ],
    "rules": [],
    "test_data": "The test data rows for each table represent instances in the Python code with attributes filled. These objects maintain consistency with the attributes defined in the sqlalchemy models.",
    "test_data_rows": [
        {
            "test_data_row_variable": "airport1",
            "code": "airport1 = Airport(name=\"JFK International\", location=\"New York\", construction_year=1948, capacity=60000)"
        },
        {
            "test_data_row_variable": "airport2",
            "code": "airport2 = Airport(name=\"Heathrow\", location=\"London\", construction_year=1946, capacity=80000)"
        },
        {
            "test_data_row_variable": "airport3",
            "code": "airport3 = Airport(name=\"Changi Airport\", location=\"Singapore\", construction_year=1981, capacity=85300)"
        },
        {
            "test_data_row_variable": "airport4",
            "code": "airport4 = Airport(name=\"Haneda Airport\", location=\"Tokyo\", construction_year=1931, capacity=85000)"
        },
        {
            "test_data_row_variable": "flight1",
            "code": "flight1 = Flight(flight_number=\"AA101\", departure_time=datetime(2023, 11, 25, 15, 30), arrival_time=datetime(2023, 11, 25, 18, 30), airport_id=1)"
        },
        {
            "test_data_row_variable": "flight2",
            "code": "flight2 = Flight(flight_number=\"BA202\", departure_time=datetime(2023, 11, 25, 8, 0), arrival_time=datetime(2023, 11, 25, 10, 30), airport_id=2)"
        },
        {
            "test_data_row_variable": "flight3",
            "code": "flight3 = Flight(flight_number=\"SQ303\", departure_time=datetime(2023, 11, 26, 11, 0), arrival_time=datetime(2023, 11, 26, 15, 0), airport_id=3)"
        },
        {
            "test_data_row_variable": "flight4",
            "code": "flight4 = Flight(flight_number=\"JL404\", departure_time=datetime(2023, 11, 26, 12, 30), arrival_time=datetime(2023, 11, 26, 16, 30), airport_id=4)"
        }
    ],
    "test_data_sqlite": "",
    "name": "Aviation System"
}